{"topic": "DSA", "context": "Data Structures and Algorithms (DSA) are foundational topics in computer science, crucial for efficient data management and problem-solving.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which of the following is a linear data structure?\n2. Which data structure uses FIFO (First In First Out) principle?\n3. Which of these is a non-linear data structure?", "length": 3}
{"topic": "DSA", "context": "Arrays, stacks, and queues are basic data structures used to store collections of data elements.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which operation is not allowed in a stack?\n2. In which data structure are elements added at one end and removed from the other?\n3. What is the index of the first element in a typical array?", "length": 3}
{"topic": "DSA", "context": "Searching algorithms help locate an element in a data structure, such as linear search or binary search.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which searching algorithm is faster for sorted arrays?\n2. What is the worst-case time complexity of linear search?", "length": 2}
{"topic": "DSA", "context": "Sorting algorithms arrange data in a particular order, such as ascending or descending.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which of the following is a comparison-based sorting algorithm?\n2. What is the time complexity of selection sort in the worst case?", "length": 2}
{"topic": "DSA", "context": "Linked lists are data structures where elements point to the next element in the sequence.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What does each node in a singly linked list contain?\n2. Which operation is faster in a linked list compared to an array?", "length": 2}
{"topic": "DSA", "context": "Stacks are LIFO (Last In First Out) data structures, often used for function calls and expression evaluation.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which operation removes the top element from a stack?\n2. Which data structure is used to implement recursion?", "length": 2}
{"topic": "DSA", "context": "Queues are FIFO (First In First Out) data structures, suitable for scheduling and resource management.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which operation adds an element to the rear of the queue?\n2. Which operation removes an element from the front of the queue?", "length": 2}
{"topic": "DSA", "context": "Trees are hierarchical data structures consisting of nodes connected by edges.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is the topmost node of a tree called?\n2. What do you call a node with no children?", "length": 2}
{"topic": "DSA", "context": "Graphs are sets of nodes (vertices) connected by edges, used to model networks and relationships.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is an edge in a graph?\n2. Which graph traversal algorithm visits all vertices reachable from a source vertex using a queue?", "length": 2}
{"topic": "DSA", "context": "Hash tables store key-value pairs and provide fast access using hash functions.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is used to compute the index in a hash table?\n2. What is a collision in a hash table?", "length": 2}
{"topic": "DSA", "context": "Recursion is a programming technique where a function calls itself to solve a problem. It is often used in algorithms that can be broken down into smaller subproblems, such as calculating factorials, traversing trees, or implementing quicksort. Recursive functions typically have a base case to terminate the recursion and prevent infinite loops.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is recursion in computer science?\n2. Why is recursion useful in algorithms?", "length": 2}
{"topic": "DSA", "context": "Dynamic programming is a method for solving complex problems by breaking them down into simpler overlapping subproblems and storing the results of these subproblems to avoid redundant calculations. It is commonly used in optimization problems, such as the knapsack problem, longest common subsequence, and matrix chain multiplication.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is dynamic programming?\n2. In which scenarios is dynamic programming typically used?", "length": 2}
{"topic": "DSA", "context": "Hashing is a technique used to map data of arbitrary size to fixed-size values, typically for fast data retrieval. Hash tables are data structures that use hashing to store key-value pairs, allowing for efficient lookups, insertions, and deletions. Hash functions are used to compute the index for storing the data in the hash table.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is the primary purpose of hashing in computer science?\n2. What is a hash table?", "length": 2}
{"topic": "DSA", "context": "Greedy algorithms are a class of algorithms that make locally optimal choices at each step with the hope of finding a global optimum. They are often used in optimization problems, such as the coin change problem, activity selection problem, and Huffman coding. Greedy algorithms do not always produce the optimal solution for all problems, but they can be efficient for many specific cases.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is the primary characteristic of greedy algorithms?\n2. In which scenarios are greedy algorithms typically used?", "length": 2}
{"topic": "DSA", "context": "The time complexity of an algorithm describes how its running time increases with input size.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which notation describes the upper bound of an algorithm's running time?\n2. What is the time complexity of inserting an element at the end of an array (amortized)?", "length": 2}
{"topic": "DSA", "context": "Recursion is a technique where a function calls itself to solve smaller subproblems.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is necessary for a recursive function to end?\n2. Which data structure is used to manage function calls during recursion?", "length": 2}
{"topic": "DSA", "context": "Algorithms can be evaluated based on their space and time complexity.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What does space complexity measure?\n2. What does time complexity measure?", "length": 2}
{"topic": "DSA", "context": "Double-ended queues (deques) allow insertion and deletion at both ends.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which data structure allows insertion and deletion at both ends?\n2. Which operation is not possible in a standard queue?", "length": 2}
{"topic": "DSA", "context": "A binary tree is a tree in which each node has at most two children.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. How many children can a binary tree node have at most?\n2. Which traversal visits left subtree, root, then right subtree?", "length": 2}
{"topic": "DSA", "context": "A priority queue is a data structure where each element has a priority and the element with the highest priority is served first.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which data structure is commonly used to implement a priority queue?\n2. Which operation returns the element with the highest priority?", "length": 2}
{"topic": "DSA", "context": "Circular queues connect the rear of the queue back to the front forming a circle.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is a circular queue?\n2. What is the benefit of a circular queue?", "length": 2}
{"topic": "DSA", "context": "A stack overflow occurs when too many items are pushed onto a stack.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is a stack overflow?\n2. Which error occurs if you pop from an empty stack?", "length": 2}
{"topic": "DSA", "context": "The adjacency matrix and adjacency list are two common ways of representing graphs.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which graph representation is more space-efficient for sparse graphs?\n2. Which graph representation uses a 2D array?", "length": 2}
{"topic": "DSA", "context": "An algorithm is said to be stable if it maintains the relative order of equal elements.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which sorting algorithm is stable?\n2. Why is stability important in sorting?", "length": 2}
{"topic": "DSA", "context": "Recursion can be used to solve problems that can be divided into similar subproblems.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which famous problem is typically solved using recursion?\n2. What happens if a recursive function lacks a base case?", "length": 2}
{"topic": "DSA", "context": "Hash collisions can be handled in multiple ways, including chaining and open addressing.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which method resolves hash collisions by storing multiple elements at the same index?\n2. Which open addressing method checks the next available slot in a hash table?", "length": 2}
{"topic": "DSA", "context": "Graphs can be traversed using various algorithms, such as depth-first search (DFS) and breadth-first search (BFS).", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which algorithm explores as far as possible along each branch before backtracking?\n2. Which algorithm explores all neighbors at the present depth prior to moving on to nodes at the next depth level?", "length": 2}
{"topic": "DSA", "context": "Understanding the difference between directed and undirected graphs is essential for algorithm design.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is a directed graph?\n2. What is an undirected graph?", "length": 2}
{"topic": "DSA", "context": "Binary trees are a special case of trees where each node has at most two children.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is the maximum number of children a binary tree node can have?\n2. What is the height of a binary tree with only one node?", "length": 2}
{"topic": "DSA", "context": "Understanding the difference between linear and non-linear data structures is crucial for algorithm efficiency.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which of the following is a linear data structure?\n2. Which of the following is a non-linear data structure?", "length": 2}
{"topic": "DSA", "context": "Hash tables provide efficient key-value pair storage and retrieval using hash functions.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is the primary purpose of a hash table?\n2. What is a common issue with hash tables?", "length": 2}
{"topic": "DSA", "context": "Binary search is an efficient algorithm for finding items in sorted arrays.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is the time complexity of binary search?\n2. What is required for binary search to work?", "length": 2}
{"topic": "DSA", "context": "Sorting algorithms vary in time and space complexity, and stability.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which sorting algorithm is not comparison-based?\n2. Which sorting algorithm has O(n log n) average-case time complexity?", "length": 2}
{"topic": "DSA", "context": "Linked lists can be singly, doubly, or circular, each with different pointer configurations.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What does a doubly linked list node contain?\n2. Which linked list allows traversal in both directions?", "length": 2}
{"topic": "DSA", "context": "Implementing recursion can sometimes be replaced by iteration to save stack space.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which approach is used to avoid stack overflow in deep recursion?\n2. What does tail recursion allow a compiler to do?", "length": 2}
{"topic": "DSA", "context": "Graph representations impact the efficiency of traversal and search operations.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which graph representation is best for dense graphs?\n2. Which representation is best for sparse graphs?", "length": 2}
{"topic": "DSA", "context": "Heap is a complete binary tree used in priority queues and heap sort.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What property must a max-heap satisfy?\n2. Which operation is efficient in a heap?", "length": 2}
{"topic": "DSA", "context": "Hash functions can have poor distribution, leading to clustering.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is clustering in hash tables?\n2. Which collision resolution method reduces clustering?", "length": 2}
{"topic": "DSA", "context": "Graphs can be directed or undirected, and their edges can have weights.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is a directed graph?\n2. What is a weighted graph?", "length": 2}
{"topic": "DSA", "context": "Trees can be used for efficient searching and hierarchical data representation.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is the height of a tree with only one node?\n2. Which binary tree is always balanced?", "length": 2}
{"topic": "DSA", "context": "Circular linked lists allow traversal from the last node back to the first.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is the main advantage of a circular linked list?\n2. Which pointer of the last node points back to the first node?", "length": 2}
{"topic": "DSA", "context": "Hash tables are used to implement sets and maps with efficient lookups.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which data structure is used for fast key-value lookup?\n2. What can cause a hash table's performance to degrade?", "length": 2}
{"topic": "DSA", "context": "A stack can be used to evaluate postfix expressions.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which data structure is used to evaluate postfix (Reverse Polish) expressions?\n2. What is the postfix form of the infix expression (A+B)*C?", "length": 2}
{"topic": "DSA", "context": "An array is a collection of elements stored at contiguous memory locations.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What is the time complexity to access an element in an array by index?\n2. What happens if you access an array out of bounds?", "length": 2}
{"topic": "DSA", "context": "Binary trees are useful for hierarchical data and efficient searching.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which traversal visits nodes in the order: left, root, right?\n2. What is the maximum number of nodes at level k in a binary tree?", "length": 2}
{"topic": "DSA", "context": "Dynamic programming is a method for solving complex problems by breaking them down into simpler overlapping subproblems.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is the main advantage of dynamic programming?\n2. Which problem is commonly solved using dynamic programming?", "length": 2}
{"topic": "DSA", "context": "Graph algorithms like Dijkstra's and Bellman-Ford are used for finding shortest paths.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm finds the shortest path in a weighted graph?\n2. Which algorithm can handle negative edge weights?", "length": 2}
{"topic": "DSA", "context": "Binary search trees (BST) allow for efficient searching, insertion, and deletion of elements.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is the time complexity for searching in a balanced BST?\n2. What property must a binary search tree satisfy?", "length": 2}
{"topic": "DSA", "context": "Heaps are complete binary trees used to implement priority queues.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is the time complexity for inserting an element in a heap?\n2. What is the main property of a max-heap?", "length": 2}
{"topic": "DSA", "context": "Balanced binary search trees keep operations efficient by maintaining tree height.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which tree is self-balancing?\n2. What is the balance factor in an AVL tree?", "length": 2}
{"topic": "DSA", "context": "Graphs can be represented in various ways for efficient algorithm implementation.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which graph representation is best for quickly checking edge existence?\n2. Which graph algorithm is used for finding the shortest path in weighted graphs?", "length": 2}
{"topic": "DSA", "context": "Hash table resizing can affect performance and requires rehashing.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What happens during hash table resizing?\n2. When is resizing typically triggered?", "length": 2}
{"topic": "DSA", "context": "Tree traversals can be implemented recursively or iteratively.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which traversal can be used to clone a binary tree?\n2. Which traversal is best for deleting a tree?", "length": 2}
{"topic": "DSA", "context": "Graphs may contain cycles; detecting them is important in many algorithms.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm detects cycles in an undirected graph?\n2. Which traversal is often used to detect cycles in directed graphs?", "length": 2}
{"topic": "DSA", "context": "Understanding time/space trade-offs is crucial for algorithm selection.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is the space complexity of merge sort?\n2. Which sorting algorithm is in-place?", "length": 2}
{"topic": "DSA", "context": "Trie is a specialized tree used for fast retrieval of strings.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is a trie used for?\n2. Which application benefits most from a trie?", "length": 2}
{"topic": "DSA", "context": "Graphs can have negative weights; shortest path algorithms must account for this.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm finds shortest paths even with negative edge weights?\n2. What is a limitation of Dijkstra's algorithm?", "length": 2}
{"topic": "DSA", "context": "Disjoint-set (Union-Find) data structure is used in Kruskal's algorithm for Minimum Spanning Tree.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What operation does the union-find data structure support efficiently?\n2. What optimization is applied to union-find for efficiency?", "length": 2}
{"topic": "DSA", "context": "A red-black tree is a self-balancing binary search tree with color properties.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What property do red-black trees maintain?\n2. What is the maximum height of a red-black tree with n nodes?", "length": 2}
{"topic": "DSA", "context": "Graph algorithms like Prim's and Kruskal's find minimum spanning trees.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm uses a priority queue to find a minimum spanning tree?\n2. Which algorithm sorts edges to find a minimum spanning tree?", "length": 2}
{"topic": "DSA", "context": "A segment tree is used for range queries and updates in arrays.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is the time complexity for query/update in a segment tree?\n2. Which problem is efficiently solved by a segment tree?", "length": 2}
{"topic": "DSA", "context": "Senior engineers should understand time-space trade-offs in advanced algorithms.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which algorithmic paradigm uses divide and conquer and memoization?\n2. What is the main disadvantage of memoization?", "length": 2}
{"topic": "DSA", "context": "Persistent data structures retain previous versions after updates.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is a persistent data structure?\n2. Which application benefits from persistent data structures?", "length": 2}
{"topic": "DSA", "context": "Kosaraju's Algorithm is a method by which we can use to find all strongly connected components (SCCs) in a directed graph. This algorithm has application in various applications such as finding cycles in a graph, understanding the structure of the web, and analyzing networks.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which algorithm finds strongly connected components in a directed graph?\n2. What is the time complexity of Kosaraju's algorithm?", "length": 2}
{"topic": "DSA", "context": "A Bloom filter is a space-efficient, probabilistic data structure used to test whether an element is a member of a set. It's designed for applications where memory is limited, and it offers a trade-off between space and accuracy, allowing for false positives but not false negatives.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is a Bloom filter used for?\n2. What is a limitation of Bloom filters?", "length": 2}
{"topic": "DSA", "context": "Radix Sort is a non-comparative sorting algorithm, which means it does not compare elements directly with each other during sorting. Instead, it uses information about the positional (digit) order of the elements to sort them.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which sorting algorithm achieves O(n) time with certain constraints?\n2. When is radix sort not suitable?", "length": 2}
{"topic": "DSA", "context": "Graph algorithms like A* and Floyd-Warshall are used for pathfinding and all-pairs shortest paths.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the A* algorithm used for?\n2. What is the time complexity of Floyd-Warshall algorithm?", "length": 2}
{"topic": "DSA", "context": "Advanced graph algorithms include network flow and matching algorithms.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the purpose of the Ford-Fulkerson algorithm?\n2. Which problem is solved by the Hungarian algorithm?", "length": 2}
{"topic": "DSA", "context": "Cuckoo hashing is a type of closed hashing. It uses two hash functions and two tables to avoid collisions. We pass our key to the first hash function to get a location in the first table. If that location is empty, we store the key and stop.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is a key feature of cuckoo hashing?\n2. What is the worst-case time complexity for cuckoo hashing insertion?", "length": 2}
{"topic": "DSA", "context": "Perfect hashing is a technique used to create a hash table with no collisions, meaning that each key maps to a unique index in the table. This is achieved by using a secondary hash function to resolve any potential collisions that may arise from the primary hash function.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the main advantage of perfect hashing?\n2. What is the time complexity for searching in a perfect hash table?", "length": 2}
{"topic": "DSA", "context": "A van Emde Boas tree is a data structure that supports fast operations on integers within a bounded range. It allows for operations like insert, delete, and search in O(log log U) time, where U is the universe size.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the time complexity for searching in a van Emde Boas tree?\n2. What is the space complexity of a van Emde Boas tree?", "length": 2}
{"topic": "DSA", "context": "A Suffix Automaton is a powerful data structure used in string algorithms, particularly for solving substring-related problems. It's a finite-state machine that recognizes all the suffixes of a given string. This data structure, also known as a Directed Acyclic Word Graph (DAWG), allows for efficient substring searches and other string operations. ", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which string data structure allows linear time substring search?\n2. What is the space complexity of a suffix automaton?", "length": 2}
{"topic": "DSA", "context": "Concurrent queue is a thread-safe data structure that allows multiple threads to insert and remove elements concurrently without causing data corruption or race conditions.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which data structure is designed for lock-free concurrency?\n2. What is a risk in concurrent data structures?", "length": 2}
{"topic": "DSA", "context": "Splay tree is a self-adjusting binary search tree data structure, which means that the tree structure is adjusted dynamically based on the accessed or inserted elements. In other words, the tree automatically reorganizes itself so that frequently accessed or inserted elements become closer to the root node.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the key operation in a splay tree?\n2. What is the average time complexity for accessing an element in a splay tree?\n3. What is the worst-case time complexity for accessing an element in a splay tree?", "length": 3}
{"topic": "DSA", "context": "A Fibonacci heap is a data structure that consists of a collection of trees that are min-heap ordered. It is used to implement priority queues and has better amortized time complexities for decrease-key and delete operations compared to binary heaps.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the primary advantage of a Fibonacci heap over a binary heap?\n2. What is the time complexity for inserting an element into a Fibonacci heap?", "length": 2}
{"topic": "DSA", "context": "A skip list is a probabilistic data structure that allows for fast search, insertion, and deletion operations. It consists of multiple layers of linked lists, where each layer acts as an express lane for the layer below it, allowing for logarithmic time complexity for search operations.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the average time complexity for searching in a skip list?\n2. What is the primary advantage of using a skip list over a balanced tree?", "length": 2}
{"topic": "DSA", "context": "A disjoint-set data structure, also known as union-find, is used to keep track of a set of elements partitioned into disjoint subsets. It supports two primary operations: find (determining which subset a particular element is in) and union (merging two subsets into a single subset).", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the primary use case for a disjoint-set data structure?\n2. What is the time complexity for the find operation with path compression?", "length": 2}
{"topic": "DSA", "context": "Trie is a tree-like data structure that stores a dynamic set of strings, where each node represents a character of the string. It is particularly useful for tasks like autocomplete and spell checking.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the primary use case for a trie?\n2. What is the time complexity for searching a word in a trie?", "length": 2}
{"topic": "DSA", "context": "Segment Tree is a data structure that allows efficient querying and updating of intervals or segments of an array. It is particularly useful for problems involving range queries, such as finding the sum, minimum, maximum, or any other operation over a specific range of elements in an array.This structure enables fast query and update operations with a time complexity of O(log n), making it a powerful tool in algorithm design and optimization.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which data structure supports 2D range queries efficiently?\n2. What is the time complexity for querying a segment tree?", "length": 2}
{"topic": "DSA", "context": "Binary Indexed Trees or Fenwick Trees are used for problems where we have following types of multiple operations on a fixed sized. Prefix Operation (Sum, Product, XOR, OR, etc). Note that range operations can also be solved using prefix. For example, range sum from index L to R is prefix sum till R (included minus prefix sum til L-1. Update an array item Time Complexities of both the operations is O(log n). Note that we need O(n log n) preprocessing time and O(n) auxiliary space.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is the time complexity for updating a Binary Indexed Tree?\n2. What is the space complexity of a Binary Indexed Tree?", "length": 2}
{"topic": "DSA", "context": "KMP (Knuth-Morris-Pratt) and Boyer-Moore are two efficient string search algorithms, but they have important differences in how they work and their performance. KMP generally performs better with smaller alphabets, while Boyer-Moore tends to be faster with larger alphabets.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which string matching algorithm preprocesses the pattern for efficient searching?\n2. Which string matching algorithm skips sections based on mismatches?", "length": 2}
{"topic": "DSA", "context": "Parallel Random Access Machine, also called PRAM is a model considered for most of the parallel algorithms. It helps to write a precursor parallel algorithm without any architecture constraints and also allows parallel-algorithm designers to treat processing power as unlimited. It ignores the complexity of inter-process communication. PRAM algorithms are mostly theoretical but can be used as a basis for developing an efficient parallel algorithm for practical machines and can also motivate building specialized machines. ", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which model is used to analyze parallel algorithms?\n2. What is speedup in parallel algorithms?", "length": 2}
{"topic": "DSA", "context": "Advanced data structures like Treaps combine properties of heaps and BSTs.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What two properties does a treap maintain?\n2. What is the expected height of a treap?", "length": 2}
{"topic": "DSA", "context": "You are developing a feature for a music player app that allows users to go back to previously played songs. The order in which songs were played matters.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which data structure is most suitable for implementing this 'history' or 'back' functionality?", "length": 1}
{"topic": "DSA", "context": "Imagine you are managing a customer support ticketing system. Tickets must be handled in the order they are received to be fair.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which data structure should you use to manage the incoming tickets?", "length": 1}
{"topic": "DSA", "context": "You are building a contact list application for a mobile phone. You need to store names and their corresponding phone numbers for quick lookups.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What is the most efficient data structure for storing and retrieving contacts by name?", "length": 1}
{"topic": "DSA", "context": "You are working on an e-commerce website with a sorted list of product prices. A user wants to know if a product exists at a specific price.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which algorithm is most efficient for searching for the price in this sorted list?", "length": 1}
{"topic": "DSA", "context": "You are designing the 'undo' feature for a simple text editor. Every time the user types a word, it should be possible to undo that action.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which data structure is ideal for managing the history of actions to be undone?", "length": 1}
{"topic": "DSA", "context": "You need to model a company's organizational chart, showing the hierarchy from the CEO down to various employees.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. What data structure best represents this kind of hierarchical relationship?", "length": 1}
{"topic": "DSA", "context": "In a social media app, you need to store the network of friendships. Each user can be friends with many other users.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. Which data structure is most suitable for representing this 'friendship' network?", "length": 1}
{"topic": "DSA", "context": "You are creating a playlist feature. Users frequently add songs to the middle of the playlist and remove them.", "language": "English", "question_type": "Multiple Choice", "seniority": "Intern", "questions": "1. For a playlist with frequent insertions and deletions in the middle, which data structure is more efficient than a standard array?", "length": 1}
{"topic": "DSA", "context": "You are designing an autocomplete feature for a search engine. As a user types, you need to suggest words that start with the typed prefix.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which data structure is specifically designed for efficient prefix-based string searches?", "length": 1}
{"topic": "DSA", "context": "You are building a caching system to store recently viewed web pages. The system should automatically discard the least recently used page when it's full.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What combination of data structures is ideal for implementing an LRU (Least Recently Used) cache?", "length": 1}
{"topic": "DSA", "context": "In a video game, you need to find the shortest path for a character to move from a starting point to a destination on a grid, avoiding obstacles.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which algorithm is best suited for finding the shortest path on an unweighted grid?", "length": 1}
{"topic": "DSA", "context": "You are developing a code validator that checks if brackets and parentheses in a source file are correctly matched and nested (e.g., `({[]})` is valid, but `([)]` is not).", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which data structure would you use to solve this balancing problem?", "length": 1}
{"topic": "DSA", "context": "You are building a leaderboard for an online game. You need to efficiently display the top 10 players out of thousands of active players.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which data structure allows you to efficiently find and maintain the 'Top K' elements from a large dataset?", "length": 1}
{"topic": "DSA", "context": "You are designing a build system for a software project. Some tasks must be completed before others can begin (e.g., compiling code before linking).", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. What graph algorithm would you use to determine a valid order in which to execute these dependent tasks?", "length": 1}
{"topic": "DSA", "context": "You need to detect if a directed graph representing financial transactions has a cycle, which could indicate a fraudulent circular payment scheme.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which algorithm can be used to detect a cycle in a directed graph?", "length": 1}
{"topic": "DSA", "context": "You are implementing a file compression utility. You want to assign shorter binary codes to more frequent characters to save space.", "language": "English", "question_type": "Multiple Choice", "seniority": "Junior", "questions": "1. Which algorithm is a classic example of using a greedy approach and a priority queue to build an optimal prefix code tree for this purpose?", "length": 1}
{"topic": "DSA", "context": "You're designing a 'People You May Know' feature for a social network. The goal is to suggest friends of friends who are not yet connected to the user.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm would be most effective for finding these second-degree connections?", "length": 1}
{"topic": "DSA", "context": "You are designing a navigation app. Given a map of cities with roads of varying lengths (costs), you need to find the absolute shortest route from a starting city to a destination city.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm is designed to find the shortest path in a weighted graph with non-negative edge weights?", "length": 1}
{"topic": "DSA", "context": "Imagine you are building a system to find the median of a continuous stream of incoming stock prices. The number of prices is unknown and can be very large.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. How can you efficiently calculate the running median at any point in time?", "length": 1}
{"topic": "DSA", "context": "You're developing a ride-sharing app. You need to match available drivers to nearby ride requests to minimize the overall pickup time for customers.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. This matching problem can be modeled as finding a maximum matching in which type of graph?", "length": 1}
{"topic": "DSA", "context": "You are working on a real-time strategy game. To optimize performance, you need to quickly find all game units within a certain rectangular area on the map.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which spatial partitioning data structure is ideal for efficient 2D range queries?", "length": 1}
{"topic": "DSA", "context": "You're building a feature to detect if two documents are near-duplicates. You decide to break each document into a set of overlapping shingles (substrings) and compare their similarity.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which algorithm is suitable for quickly finding common substrings (shingles) between two large text documents?", "length": 1}
{"topic": "DSA", "context": "You're given a list of stock prices for consecutive days. The task is to find the maximum profit that could have been made by buying once and selling once.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. What is an efficient, single-pass approach to solve this problem?", "length": 1}
{"topic": "DSA", "context": "You need to find the minimum number of edits (insertions, deletions, or substitutions) required to change one word into another, for a spell-checking 'did you mean?' feature.", "language": "English", "question_type": "Multiple Choice", "seniority": "Mid", "questions": "1. Which classic algorithm calculates this 'edit distance' between two sequences?", "length": 1}
{"topic": "DSA", "context": "You are designing a load balancer for a large-scale distributed system. When a server is added or removed, you need to re-distribute the load with minimal disruption to existing key-to-server mappings.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which hashing technique is specifically designed to minimize re-mapping when the set of available nodes changes?", "length": 1}
{"topic": "DSA", "context": "In a logistics network, you need to calculate the maximum amount of goods that can be transported from a source warehouse to a destination factory through a network of intermediate centers, each with a maximum capacity.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which algorithm (or theorem) is fundamental to solving this maximum flow problem in a directed graph?", "length": 1}
{"topic": "DSA", "context": "You are designing a bioinformatics tool to align two very long DNA sequences. The goal is to find the best possible alignment by introducing gaps to maximize a similarity score.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which algorithmic paradigm is essential for solving this global sequence alignment problem efficiently?", "length": 1}
{"topic": "DSA", "context": "You are building a real-time spell checker for a search engine that must provide suggestions for misspelled queries from a massive dictionary of words, very quickly.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which specialized data structure is efficient for finding all words in a dictionary within a small edit distance of a given query word?", "length": 1}
{"topic": "DSA", "context": "In a distributed database, you need to implement a mechanism for nodes to agree on a committed value (e.g., the state of a transaction) even if some nodes fail or messages are lost.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which class of algorithms is designed to achieve this kind of fault-tolerant consensus in a distributed system?", "length": 1}
{"topic": "DSA", "context": "You are designing a memory-intensive application and need a custom memory allocator. You need to find the smallest available memory block that is large enough for a requested size.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. To efficiently manage and find suitable free memory blocks, which data structure would be most appropriate?", "length": 1}
{"topic": "DSA", "context": "You're tasked with finding the 'convex hull' of a set of points on a 2D plane, for example, to calculate the minimum-length fence required to enclose a set of valuable trees in a field.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. Which is an efficient algorithm for computing the convex hull of a set of points?", "length": 1}
{"topic": "DSA", "context": "In a content delivery network (CDN), you need to find the lowest common ancestor (LCA) of two nodes in a tree-like network topology to determine the optimal caching server for a piece of content requested by both nodes.", "language": "English", "question_type": "Multiple Choice", "seniority": "Senior", "questions": "1. What is an efficient method to answer many LCA queries on a static tree after some initial preprocessing?\n2. What is the time complexity for answering an LCA query after preprocessing?", "length": 2}